/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { ListItem } from '../../list/internal/listitem/list-item.js';
/**
 * Interface specific to menu item and not list item.
 */
interface MenuItemSelf {
    /**
     * The visible headline text of the item.
     */
    headline: string;
    /**
     * Whether or not the item is the currently active item of interest (focuses
     * upon activation).
     */
    active: boolean;
    /**
     * Whether or not the item is in the selected visual state.
     */
    selected?: boolean;
    /**
     * If it is a sub-menu-item, a method that can close the submenu.
     */
    close?: () => void;
    /**
     * Focuses the item.
     */
    focus: () => void;
}
/**
 * The interface of every menu item interactive with a menu. All menu items
 * should implement this interface to be compatible with md-menu. Additionally
 * they should have both the `md-menu-item` and `md-list-item` attributes set.
 */
export type MenuItem = MenuItemSelf & ListItem;
/**
 * The reason the `close-menu` event was dispatched.
 */
export interface Reason {
    kind: string;
}
/**
 * The click selection reason for the `close-menu` event. The menu was closed
 * because an item was selected via user click.
 */
export interface ClickReason extends Reason {
    kind: typeof CLOSE_REASON.CLICK_SELECTION;
}
/**
 * The keydown reason for the `close-menu` event. The menu was closed
 * because a specific key was pressed. The default closing keys for
 * `md-menu-item` are, Space, Enter or Escape.
 */
export interface KeydownReason extends Reason {
    kind: typeof CLOSE_REASON.KEYDOWN;
    key: string;
}
/**
 * The default menu closing reasons for the material md-menu package.
 */
export type DefaultReasons = ClickReason | KeydownReason;
/**
 * Creates an event that closes any parent menus.
 */
export declare function createCloseMenuEvent<T extends Reason = DefaultReasons>(initiator: MenuItem, reason: T): CustomEvent<{
    initiator: MenuItem;
    itemPath: MenuItem[];
    reason: T;
}>;
/**
 * Creates an event that signals to the menu that it should stay open on the
 * focusout event.
 */
export declare function createStayOpenOnFocusoutEvent(): Event;
/**
 * Creates an event that signals to the menu that it should close open on the
 * focusout event.
 */
export declare function createCloseOnFocusoutEvent(): Event;
/**
 * Creates a default close menu event used by md-menu.
 */
export declare const createDefaultCloseMenuEvent: (initiator: MenuItem, reason: DefaultReasons) => CustomEvent<{
    initiator: MenuItem;
    itemPath: MenuItem[];
    reason: DefaultReasons;
}>;
/**
 * The type of the default close menu event used by md-menu.
 */
export type CloseMenuEvent<T extends Reason = DefaultReasons> = ReturnType<typeof createCloseMenuEvent<T>>;
/**
 * Creates an event that requests the parent md-menu to deactivate all other
 * items.
 */
export declare function createDeactivateItemsEvent(): Event;
/**
 * The type of the event that requests the parent md-menu to deactivate all
 * other items.
 */
export type DeactivateItemsEvent = ReturnType<typeof createDeactivateItemsEvent>;
/**
 * Creates an event that requests the typeahead functionality of containing menu
 * be deactivated.
 */
export declare function createDeactivateTypeaheadEvent(): Event;
/**
 * The type of the event that requests the typeahead functionality of containing
 * menu be deactivated.
 */
export type DeactivateTypeaheadEvent = ReturnType<typeof createDeactivateTypeaheadEvent>;
/**
 * Creates an event that requests the typeahead functionality of containing menu
 * be activated.
 */
export declare function createActivateTypeaheadEvent(): Event;
/**
 * The type of the event that requests the typeahead functionality of containing
 * menu be activated.
 */
export type ActivateTypeaheadEvent = ReturnType<typeof createActivateTypeaheadEvent>;
/**
 * Keys that are used to navigate menus.
 */
export declare const NAVIGABLE_KEY: {
    readonly UP: "ArrowUp";
    readonly DOWN: "ArrowDown";
    readonly RIGHT: "ArrowRight";
    readonly LEFT: "ArrowLeft";
};
/**
 * Keys that are used for selection in menus.
 */
export declare const SELECTION_KEY: {
    readonly SPACE: "Space";
    readonly ENTER: "Enter";
};
/**
 * Default close `Reason` kind values.
 */
export declare const CLOSE_REASON: {
    readonly CLICK_SELECTION: "CLICK_SELECTION";
    readonly KEYDOWN: "KEYDOWN";
};
/**
 * Keys that can close menus.
 */
export declare const KEYDOWN_CLOSE_KEYS: {
    readonly ESCAPE: "Escape";
    readonly SPACE: "Space";
    readonly ENTER: "Enter";
};
type Values<T> = T[keyof T];
/**
 * Determines whether the given key code is a key code that should close the
 * menu.
 *
 * @param code The KeyboardEvent code to check.
 * @return Whether or not the key code is in the predetermined list to close the
 * menu.
 */
export declare function isClosableKey(code: string): code is Values<typeof KEYDOWN_CLOSE_KEYS>;
/**
 * Determines whether the given key code is a key code that should select a menu
 * item.
 *
 * @param code They KeyboardEvent code to check.
 * @return Whether or not the key code is in the predetermined list to select a
 * menu item.
 */
export declare function isSelectableKey(code: string): code is Values<typeof SELECTION_KEY>;
/**
 * Determines whether a target element is contained inside another element's
 * composed tree.
 *
 * @param target The potential contained element.
 * @param container The potential containing element of the target.
 * @returns Whether the target element is contained inside the container's
 * composed subtree
 */
export declare function isElementInSubtree(target: EventTarget, container: EventTarget): boolean;
export {};
