/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { Corner } from '../menu.js';
import { MenuItemEl } from '../menuitem/menu-item.js';
/**
 * @fires deactivate-items Requests the parent menu to deselect other items when
 * a submenu opens
 * @fires deactivate-typeahead Requests the parent menu to deactivate the
 * typeahead functionality when a submenu opens
 * @fires activate-typeahead Requests the parent menu to activate the typeahead
 * functionality when a submenu closes
 * @fires stay-open-on-focusout Requests the parent menu to stay open when
 * focusout event is fired or has a `null` `relatedTarget` when submenu is
 * opened.
 * @fires close-on-focusout Requests the parent menu to close when focusout
 * event is fired or has a `null` `relatedTarget` When submenu is closed.
 */
export declare class SubMenuItem extends MenuItemEl {
    /**
     * The anchorCorner to set on the submenu.
     */
    anchorCorner: Corner;
    /**
     * The menuCorner to set on the submenu.
     */
    menuCorner: Corner;
    /**
     * The delay between pointerenter and submenu opening.
     */
    hoverOpenDelay: number;
    /**
     * The delay between ponterleave and the submenu closing.
     */
    hoverCloseDelay: number;
    /**
     * Sets the item in the selected visual state when a submenu is opened.
     */
    selected: boolean;
    protected submenuHover: boolean;
    private readonly menus;
    protected keepOpenOnClick: boolean;
    private previousOpenTimeout;
    private previousCloseTimeout;
    private get submenuEl();
    /**
     * Starts the default 400ms countdown to open the submenu.
     */
    protected onPointerenter: () => void;
    /**
     * Starts the default 400ms countdown to close the submenu.
     */
    protected onPointerleave: () => void;
    protected onClick(): void;
    protected getRenderClasses(): {
        'submenu-hover': boolean;
        'has-focus-ring': boolean;
        'with-one-line': boolean;
        'with-two-line': boolean;
        'with-three-line': boolean;
        disabled: boolean;
    };
    /**
     * On item keydown handles opening the submenu.
     */
    protected onKeydown(event: KeyboardEvent): void;
    /**
     * Render the submenu at the end
     */
    protected renderEnd(): import("lit-html").TemplateResult<1>;
    /**
     * Renders the slot for the submenu.
     */
    private renderSubMenu;
    private onCloseSubmenu;
    private onSubMenuKeydown;
    /**
     * Shows the submenu.
     *
     * @param onOpened A function to call after the menu is opened.
     */
    show(onOpened?: () => void): void;
    /**
     * Closes the submenu.
     *
     * @param onClosed A function to call after the menu is closed.
     */
    close(onClosed?: () => void): void;
    /**
     * Determines whether the given KeyboardEvent code is one that should open
     * the submenu. This is RTL-aware. By default, left, right, space, or enter.
     *
     * @param code The native KeyboardEvent code.
     * @return Whether or not the key code should open the submenu.
     */
    private isSubmenuOpenKey;
    /**
     * Determines whether the given KeyboardEvent code is one that should close
     * the submenu. This is RTL-aware. By default right, left, or escape.
     *
     * @param code The native KeyboardEvent code.
     * @return Whether or not the key code should close the submenu.
     */
    private isSubmenuCloseKey;
    private onSubmenuPointerEnter;
    private onSubmenuPointerLeave;
}
