//
// Copyright 2022 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

// go/keep-sorted start
@use 'sass:list';
@use 'sass:map';
@use 'sass:string';
// go/keep-sorted end
// go/keep-sorted start
@use '../../../focus/focus-ring';
@use '../../../icon/icon';
@use '../../../ripple/ripple';
@use '../../../tokens';
// go/keep-sorted end

@mixin theme($tokens) {
  $supported-tokens: tokens.$md-comp-list-item-supported-tokens;

  @each $token, $value in $tokens {
    @if list.index($supported-tokens, $token) == null {
      @error 'Token `#{$token}` is not a supported token.';
    }

    @if $value {
      --md-list-item-#{$token}: #{$value};
    }
  }
}

@mixin styles() {
  $tokens: tokens.md-comp-list-item-values();

  :host {
    @each $token, $value in $tokens {
      --_#{$token}: var(--md-list-item-#{$token}, #{$value});
    }
  }

  @include _list-item;
  @include _image;
  @include _icon;
  @include _avatar;
  @include _video;
}

@mixin _list-item() {
  :host {
    color: unset;

    @include ripple.theme(
      (
        hover-color: var(--_hover-state-layer-color),
        hover-opacity: var(--_hover-state-layer-opacity),
        pressed-color: var(--_pressed-state-layer-color),
        pressed-opacity: var(--_pressed-state-layer-opacity),
      )
    );
  }

  md-focus-ring {
    @include focus-ring.theme(
      (
        'shape': 8px,
      )
    );
  }

  .list-item {
    align-items: center;
    box-sizing: border-box;
    display: flex;
    outline: none;
    position: relative;
    width: 100%;
    text-decoration: none;
    background-color: var(--_container-color);
    border-radius: var(--_container-shape);
    // hide android tap color since we have ripple
    -webkit-tap-highlight-color: transparent;

    &:not(.disabled):not(.noninteractive) {
      cursor: pointer;
    }

    &.disabled {
      pointer-events: none;
    }
  }

  .content-wrapper {
    display: flex;
    width: 100%;
    box-sizing: border-box;
    border-radius: inherit;
    padding-inline-end: var(--_trailing-space);
  }

  md-ripple {
    border-radius: inherit;
  }

  .with-one-line {
    min-height: var(--_one-line-container-height);
  }

  .with-two-line {
    min-height: var(--_two-line-container-height);
  }

  .with-three-line {
    min-height: var(--_three-line-container-height);
  }

  .start {
    display: inline-flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    flex: 0 0 auto;
    z-index: 1;

    .with-three-line & {
      justify-content: start;
    }
  }

  slot[name='start'] {
    &::slotted([data-variant='icon']),
    &::slotted([data-variant='image']),
    &::slotted([data-variant='avatar']) {
      margin-inline-start: var(--_leading-element-leading-space);
    }
  }

  .body {
    display: inline-flex;
    justify-content: center;
    flex-direction: column;
    box-sizing: border-box;
    flex: 1 0 0;
    padding-inline-start: var(--_leading-space);
    z-index: 1;
  }

  .end {
    display: inline-flex;
    flex-direction: column;
    justify-content: center;
    flex: 0 0 auto;
    z-index: 1;

    .with-three-line & {
      justify-content: start;
    }
  }

  slot[name='end']::slotted(*),
  .trailing-supporting-text {
    margin-inline-start: var(
      --_trailing-element-headline-trailing-element-space
    );
  }

  .label-text {
    display: flex;
    text-overflow: ellipsis;
    overflow-x: hidden;
    white-space: nowrap;
    color: var(--_label-text-color);
    font: var(--_label-text-type);

    :hover & {
      color: var(--_hover-label-text-color);
    }

    :focus & {
      color: var(--_focus-label-text-color);
    }

    :active & {
      color: var(--_pressed-label-text-color);
    }

    .disabled & {
      color: var(--_disabled-label-text-color);
      opacity: var(--_disabled-label-text-opacity);
    }
  }

  .supporting-text {
    text-overflow: ellipsis;
    white-space: normal;
    overflow: hidden;
    width: 100%;
    color: var(--_supporting-text-color);
    font: var(--_supporting-text-type);

    // Box is supposed to be deprecated, but line-clamp is not. It's still on
    // standards track and can only be applied with display: -webkit-box and
    // -webkit-box-orient: vertical. Must change once un-prefixed line-clamp
    // ships
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 1;
    display: -webkit-box;

    .disabled & {
      color: var(--_disabled-label-text-color);
      opacity: var(--_disabled-label-text-opacity);
    }
  }

  .supporting-text--multi-line {
    -webkit-line-clamp: 2;
  }

  .trailing-supporting-text {
    font: var(--_trailing-supporting-text-type);

    .list-item:not(.disabled) & {
      color: var(--_trailing-supporting-text-color);
    }

    .disabled & {
      color: var(--_disabled-label-text-color);
      opacity: var(--_disabled-label-text-opacity);
    }

    .with-three-line & {
      // In three line, trailing-supporting-text must align with the mid-line of
      // the headline text.
      margin-block-start: calc(
        (
            var(--_label-text-line-height) -
              var(--_trailing-supporting-text-line-height)
          ) / 2
      );
    }
  }

  .focus-ring {
    z-index: 1;
  }
}

@mixin _image() {
  ::slotted([data-variant='image']) {
    display: inline-flex;
    height: var(--_leading-image-height);
    width: var(--_leading-image-width);
    border-radius: var(--_leading-image-shape);
    // Min height is two-line height
    margin-block: calc(
      (var(--_two-line-container-height) - var(--_leading-image-height)) / 2
    );

    .with-three-line & {
      margin-block: 0;
    }
  }
}

@mixin _icon() {
  ::slotted(*) {
    fill: currentColor;
  }

  slot[name='start']::slotted([data-variant='icon']) {
    font-size: var(--_leading-icon-size);
    width: var(--_leading-icon-size);
    height: var(--_leading-icon-size);
    color: var(--_leading-icon-color);

    .with-three-line & {
      // In three line, icon must align with the mid-line of headline text
      margin-block-start: calc(
        (var(--_label-text-line-height) - var(--_leading-icon-size)) / 2
      );
    }
  }

  slot[name='end']::slotted([data-variant='icon']) {
    font-size: var(--_trailing-icon-size);
    width: var(--_trailing-icon-size);
    height: var(--_trailing-icon-size);
    color: var(--_trailing-icon-color);

    .with-three-line & {
      // In three line, icon must align with the mid-line of headline text
      margin-block-start: calc(
        (var(--_label-text-line-height) - var(--_trailing-icon-size)) / 2
      );
    }
  }

  :hover {
    slot[name='start']::slotted([data-variant='icon']) {
      color: var(--_hover-leading-icon-icon-color);
    }

    slot[name='end']::slotted([data-variant='icon']) {
      color: var(--_hover-trailing-icon-icon-color);
    }
  }

  :focus {
    slot[name='start']::slotted([data-variant='icon']) {
      color: var(--_focus-leading-icon-icon-color);
    }

    slot[name='end']::slotted([data-variant='icon']) {
      color: var(--_focus-trailing-icon-icon-color);
    }
  }

  :active {
    slot[name='start']::slotted([data-variant='icon']) {
      color: var(--_pressed-leading-icon-icon-color);
    }

    slot[name='end']::slotted([data-variant='icon']) {
      color: var(--_pressed-trailing-icon-icon-color);
    }
  }

  .disabled {
    slot[name='start']::slotted([data-variant='icon']) {
      opacity: var(--_disabled-leading-icon-opacity);
      color: var(--_disabled-leading-icon-color);
    }

    slot[name='end']::slotted([data-variant='icon']) {
      opacity: var(--_disabled-trailing-icon-opacity);
      color: var(--_disabled-trailing-icon-color);
    }
  }
}

@mixin _avatar() {
  ::slotted([data-variant='avatar']) {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    background-color: var(--_leading-avatar-color);
    height: var(--_leading-avatar-size);
    width: var(--_leading-avatar-size);
    border-radius: var(--_leading-avatar-shape);
    color: var(--_leading-avatar-label-color);
    font: var(--_leading-avatar-label-type);
  }
}

@mixin _video() {
  ::slotted([data-variant='video']),
  ::slotted([data-variant='video-large']) {
    display: inline-flex;
    object-fit: cover;
    height: var(--_small-leading-video-height);
    width: var(--_leading-video-width);
    border-radius: var(--_leading-video-shape);
    margin-inline-start: var(--_leading-video-leading-space);
    // Min height is three-line height
    margin-block: calc(
      (var(--_three-line-container-height) - var(--_small-leading-video-height)) /
        2
    );

    // Let it auto-layout so that we don't mess with the icons and supporting
    // text that is supposed to be top-aligned in three-line.
    .with-three-line & {
      margin-block: 0;
    }
  }

  ::slotted([data-variant='video-large']) {
    // Min height is three-line height
    margin-block: calc(
      (var(--_three-line-container-height) - var(--_large-leading-video-height)) /
        2
    );
    height: var(--_large-leading-video-height);
  }
}
