/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { __decorate } from "tslib";
import '../../focus/md-focus-ring.js';
import '../../ripple/ripple.js';
import { html, LitElement, nothing } from 'lit';
import { property } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { requestUpdateOnAriaChange } from '../../internal/aria/delegate.js';
/**
 * A chip component.
 */
export class Chip extends LitElement {
    constructor() {
        super(...arguments);
        this.disabled = false;
        this.label = '';
    }
    /**
     * Whether or not the primary ripple is disabled (defaults to `disabled`).
     * Some chip actions such as links cannot be disabled.
     */
    get rippleDisabled() {
        return this.disabled;
    }
    render() {
        return this.renderContainer(this.renderContainerContent());
    }
    getContainerClasses() {
        return {
            disabled: this.disabled,
        };
    }
    renderContainerContent() {
        return html `
      ${this.renderOutline()}
      <md-focus-ring part="focus-ring"
          for=${this.primaryId}></md-focus-ring>
      <md-ripple for=${this.primaryId}
          ?disabled=${this.rippleDisabled}></md-ripple>
      ${this.renderPrimaryAction(this.renderPrimaryContent())}
    `;
    }
    renderOutline() {
        return html `<span class="outline"></span>`;
    }
    renderLeadingIcon() {
        return html `<slot name="icon"></slot>`;
    }
    renderPrimaryContent() {
        return html `
      <span class="leading icon" aria-hidden="true">
        ${this.renderLeadingIcon()}
      </span>
      <span class="label">${this.label}</span>
      <span class="touch"></span>
    `;
    }
}
(() => {
    requestUpdateOnAriaChange(Chip);
})();
/** @nocollapse */
Chip.shadowRootOptions = {
    ...LitElement.shadowRootOptions,
    delegatesFocus: true
};
__decorate([
    property({ type: Boolean })
], Chip.prototype, "disabled", void 0);
__decorate([
    property()
], Chip.prototype, "label", void 0);
/**
 * Renders a chip container that follows the grid/row/cell a11y pattern.
 *
 * This renders the container with `role="row"`.
 */
export function renderGridContainer(content, classes) {
    return html `
    <div class="container ${classMap(classes)}" role="row">${content}</div>
  `;
}
/**
 * Renders a chip action that follows the grid/row/cell a11y pattern.
 *
 * This wraps actions in a `role="cell"` div.
 */
export function renderGridAction(content) {
    if (content === nothing) {
        return content;
    }
    return html `<div class="cell" role="cell">${content}</div>`;
}
//# sourceMappingURL=chip.js.map